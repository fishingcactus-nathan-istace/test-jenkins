@Library('jenkins-utils@master')
@Library("fc-unity")

import org.emidee.jenkins.DeploymentEnvironment
import org.emidee.jenkins.Environment
import groovy.transform.Field

properties([
    parameters([
        string(name: "ROOT_BUILD_DIRECTORY", defaultValue: "C:\\UnityBuilds", trim: true),
        string(name: "ROOT_ARCHIVE_DIRECTORY", defaultValue: "\\\\fishingnas\\Versions\\Nightly", trim: true),
        string(name: "TOOLS_NAS_DIRECTORY", defaultValue: "\\\\fishingnas\\Tools", trim: true),
        string(name: "STEAM_ARCHIVE_DIRECTORY", defaultValue: "D:\\steambuilds\\gloomy", trim: true),
        booleanParam(name: "BUILD_WIN64", defaultValue: true),
        booleanParam(name: "BUILD_PS5", defaultValue: false),
        booleanParam(name: "BUILD_STEAM", defaultValue: false),
        booleanParam(name: "BUILD_ANDROID", defaultValue: false),
    ])
])

def platforms = getBuildPlatformsFromParams();

platforms.each {
    tasks[it] = {
        buildPlatform( it )
    }
}

/*
Each platform will be built in parallel. Parallelize accross all the slaves
Better parallelize each platform than each pull request, to save time when only
a few jobs are running
*/

parallel tasks

/////////////////
/// FUNCTIONS ///
/////////////////

def buildPlatform( String platform ) {
   node( getNodeLabels( platform ) ) {
      
      env.WORKSPACE = getWorkspace();
      env.PROJECT_FOLDER = new File(env.WORKSPACE, "Gloomy").toString();
    
      stage('Checkout ' + platform) {
         sendMessageToSlack("Build started", platform, "#0000FF");
         checkout scm
      }
    
      try {
         commitSha.writeToCsFile( "Gloomy/Assets/UI/Scripts/CommitSHA.cs" );

         def base_arguments = "\"silent-crashes\", \"accept-apiupdate\", \"buildTarget ${getPlatformBuildTarget( platform )}\"";
         echo "${base_arguments}"

         String unity_install_path = unityPosh.activateLicense( getPlatformSerial( platform ), env.PROJECT_FOLDER, base_arguments )

      } catch (Exception err) {
         sendMessageToSlack("Failed to process", platform, "danger", "Reason : " + err.toString())
         error "Failed to process " + platform + " : " + err.toString()
      }
   }
}

def sendMessageToSlack(String message, String platform, String color, String suffix = "") {

    String full_message = message + " : #${env.BUILD_NUMBER} - ${env.JOB_NAME} - ${env.BRANCH_NAME} - " + platform + " On ${env.NODE_NAME} (<${env.BUILD_URL}|Open>)"

    if (!(suffix?.trim())) {
        full_message += " " + suffix
    }

    echo "SLACK: ${full_message}"
}
