
//
// THIS FILE WAS AUTO-GENERATED. DO NOT MODIFY LOCALLY BUT INSTEAD UPDATE THE PACKAGE com.fishingcactus.jenkins
//

@Library('jenkins-utils@master')

def can_abort_previous_builds = true

if ( can_abort_previous_builds ) {
    // If the job to run targets a branch which is already being built, cancel the already running job
    // abortPreviousRunningBuilds()
}

// Expose some properties in the UI of jenkins when we run the job manually
properties([
    parameters([
        string(name: "ROOT_ARCHIVE_DIRECTORY", defaultValue: "\\\\fishingnas\\Versions", trim: true),
        // string( name: "CACHE_SERVER_IP", defaultValue: "192.168.2.124", trim: true ),
        booleanParam(name: "BUILD_CONTENT", defaultValue: false),
        booleanParam(name: "CLEAN_CONTENT", defaultValue: false),
        booleanParam(name: "DEVELOPMENT_BUILD", defaultValue: true),
        booleanParam(name: "ARCHIVE_BUILD", defaultValue: false),
        booleanParam(name: "WITH_WIN64", defaultValue: true),
        booleanParam(name: "WITH_PS5", defaultValue: false),

    ]),
    buildDiscarder(logRotator(numToKeepStr: '1')),
    
])

stage('Check parameters') {
    try {
        if (params.ROOT_ARCHIVE_DIRECTORY == "" || params.ROOT_ARCHIVE_DIRECTORY == null) {
            error "ROOT_ARCHIVE_DIRECTORY must be set !"
        }
    } catch (Exception err) {
        sendMessageToSlack("Build failed : ${env.JOB_NAME} (<${env.BUILD_URL}|Open>)", "", "danger")
        currentBuild.result = "FAILURE"
    }
}

// :TODO: this can be gathered using Environment.instance.PROJECT_NAME after the initialization
env.PROJECT_NAME = "Test"

initializeEnvironment(this, env.PROJECT_NAME)

env.BRANCH_TYPE = getBranchType(env.BRANCH_NAME)
env.DEPLOYMENT_ENVIRONMENT = getBranchDeploymentEnvironment(env.BRANCH_TYPE)
env.CLIENT_CONFIG = getClientConfig(env.DEPLOYMENT_ENVIRONMENT)
env.ARCHIVE_SUB_DIRECTORY = getArchiveSubdirectory(env.DEPLOYMENT_ENVIRONMENT, env.BRANCH_NAME)

if (env.ROOT_ARCHIVE_DIRECTORY == "" || env.ROOT_ARCHIVE_DIRECTORY == null) {
    env.ROOT_ARCHIVE_DIRECTORY = params.ROOT_ARCHIVE_DIRECTORY
}

env.ARCHIVE_DIRECTORY = "${env.ROOT_ARCHIVE_DIRECTORY}/${env.ARCHIVE_SUB_DIRECTORY}"
env.BUILD_FOLDER = "C:\\UnityBuilds\\${env.ARCHIVE_SUB_DIRECTORY}"




def isStartedByUser = currentBuild.rawBuild.getCause(hudson.model.Cause$UserIdCause) != null
def platforms = []

if ( params.WITH_WIN64 ) { platforms << 'Win64' } 
if ( params.WITH_PS5 ) { platforms << 'PS5' } 


def platform_serials = [ 
      "PS5" : "CREDENTIALS_PS5",
 
]

def tasks = [: ]

/*
Each platform will be built in parallel. Parallelize accross all the slaves
Better parallelize each platform than each pull request, to save time when only
a few jobs are running
*/
platforms.each {
    tasks[it] = {
        buildPlatform( it, platform_serials )
    }
}

parallel tasks

// ------------------------------------//
// All the helper functions used above //
// ------------------------------------//

def buildPlatform(String platform, def platform_serials ) {
    String labels = getNodeLabels(platform)

    // Some jobs must be executed exclusively on a dedicated node of jenkins
    node(labels) {
        // Some nodes store the job workspace (and the UE4 installed build) in a different directory
        
	env.WORKSPACE = getWorkspace()
	
	echo "${env.WORKSPACE}"
	
	env.PROJECT_PATH = new URI(env.WORKSPACE, ["UnityProject"].join("/")).normalize().toString()
	
	echo "${env.PROJECT_PATH}"
	
	env.BUILD_SCRIPT_DIRECTORY_PATH = new URI([env.PROJECT_PATH, "../BuildScripts"].join("/")).normalize().toString() 
	
	echo "${env.BUILD_SCRIPT_DIRECTORY_PATH}"

        ws(env.WORKSPACE) {

            echo "Job executed on '" + env.NODE_NAME + "' in workspace '" + env.WORKSPACE + "'"

            stage('Checkout ' + platform) {
                sendMessageToSlack("Build started", platform, "#0000FF")

                checkout scm
            }

            try {
                writeLastCommitId()

                def serial = "UnityProSerial"

                if ( platform_serials.containsKey( platform ) ) {
                    serial = platform_serials[ platform ]
                }

                String base_arguments = '"silent-crashes", "accept-apiupdate", '
                base_arguments += ' "buildTarget ' + platform + '", '
                base_arguments += ' "projectPath ' + env.PROJECT_PATH + '"'
                if (params.CACHE_SERVER_IP != "" && params.CACHE_SERVER_IP != null) {
                    base_arguments += ', "CacheServerIPAddress ' + params.CACHE_SERVER_IP + '"'
                }
                
                String unity_install_path = activateUnityLicense( serial, base_arguments )
                buildCookRun( platform, env.BUILD_FOLDER, unity_install_path, base_arguments )
                archiveBuild( platform, env.BUILD_FOLDER )

                if ( currentBuild.currentResult == 'SUCCESS' ) {
                    sendMessageToSlack("Successfully processed", platform, "good")
                } else {
                    sendMessageToSlack("Successfully processed BUT build is unstable", platform, "warning")
                }
                
            } catch (Exception err) {
                sendMessageToSlack("Failed to process", platform, "danger", "Reason : " + err.toString())

                error "Failed to process " + platform + " : " + err.toString()
            } finally {
                println "clean up"

                cleanUp()
            }
        }
    }
}

// :TODO:
def writeLastCommitId() {
    // String commit_id = getCommitSha()
    // String content = "const char * last_commit_id = \"" + commit_id + "\";"
    // writeFile file: 'Source/ShiftQuantum/SQLastCommitId.cpp', text: content

    // echo "Successfully overwrote Source/ShiftQuantum/SQLastCommitId.cpp"
    echo ":TODO: embed commit id in build"
}

def getCommitSha() {
    String sha = bat(returnStdout:true , script: '''
    @echo off
    git rev-parse --short HEAD
    '''
    ).trim()

    echo "Commit SHA : " + sha

    return sha
}

def getBranchType(String branch_name) {
    if (branch_name =~ ".*develop") {
        return "development"
    } else if (branch_name =~ ".*release/.*") {
        return "release"
    } else if (branch_name =~ ".*master") {
        return "master"
    }

    return "test"
}

def getBranchDeploymentEnvironment(String branch_type) {
    if (branch_type == "development") {
        return "development"
    } else if (branch_type == "release") {
        return "release"
    } else if (branch_type == "master") {
        return "shipping"
    }

    return "testing"
}

def getClientConfig(String environment_deployment) {
    if (environment_deployment == "shipping") {
        return "Shipping"
    } else if (environment_deployment == "release") {
        return "Shipping"
    }

    return "Debug"
}

def sendMessageToSlack(String message, String platform, String color, String suffix = "") {

    String full_message = message + " : #${env.BUILD_NUMBER} - ${env.JOB_NAME} - ${env.BRANCH_NAME} - " + platform + " On ${env.NODE_NAME} (<${env.BUILD_URL}|Open>)"

    if (!(suffix?.trim())) {
        full_message += " " + suffix
    }

    slackSend channel: 'p_gloomy_ci', color: color, message: full_message
}

def buildCookRun(String platform, String build_folder, String unity_install_path, String base_arguments ) {
    String umake_arguments = ""

    if ( platform == "Win64") {
        umake_arguments += " platform:Windows"
        umake_arguments += " architecture:64"
    } else {
        umake_arguments += " platform:" + platform
    }

    umake_arguments += " configuration:" + getConfiguration()

    if (params.BUILD_CONTENT ) {
        timeout(time: 1, unit: 'HOURS') {
            stage("Content Build " + platform) {
                
                def clean_content = "false"
                if (params.RESET_CONTENT) {
                    clean_content = "true"
                }

                umake_arguments += " clean:${clean_content}"

                String run_content_arguments = base_arguments + ', "executeMethod FishingCactus.BuildCli.Main mode:BuildContent ' + umake_arguments + '"'
                powershell(
                    label: "Content build Unity",
                    returnStdout: false,
                    script: getBuildScript("Run-Unity.ps1 -UnityPath " + unity_install_path + " -Arguments @(" + run_content_arguments + ") -ShouldSucceed 1")
                )
            }
        }
    }

    timeout(time: 1, unit: 'HOURS') {
        stage("Script Build " + platform) {

            umake_arguments += " path:" + build_folder

            String run_scripts_arguments = base_arguments + ', "executeMethod FishingCactus.BuildCli.Main mode:Compile ' + umake_arguments + '"'
            powershell(
                label: "Script build Unity",
                returnStdout: false,
                script: getBuildScript("Run-Unity.ps1 -UnityPath " + unity_install_path + " -Arguments @(" + run_scripts_arguments + ") -ShouldSucceed 1")
            )

            def record_issues_id = "Build_${platform}"
            recordIssues enabledForFailure: true, failOnError: true, qualityGates: [[threshold: 1, type: 'TOTAL_ERROR', unstable: false], [threshold: 1, type: 'TOTAL_NORMAL', unstable: true]], tools: [msBuild(id: record_issues_id, name: record_issues_id)]
        }
    }
}

def activateUnityLicense( String serial, String base_arguments ) {
    withCredentials([
        string(credentialsId: serial, variable: 'SERIAL'),
        string(credentialsId: 'UnityUsername', variable: 'USERNAME'),
        string(credentialsId: 'UnityPassword', variable: 'PASSWORD'),
    ]) {
        timeout(time: 30, unit: 'MINUTES') {
            stage('Get And Activate Unity Version') {
                String buildscripts_folder = "${env.WORKSPACE}/BuildScripts"

                unity_version = powershell(
                    label: "Check Unity Version",
                    returnStdout: true,
                    script: getBuildScript("Check-Unity-Version.ps1 -ProjectPath " + env.PROJECT_PATH)
                ).trim()

                unity_install_path = powershell(
                    label: "Get Unity Install Path",
                    returnStdout: true,
                    script: getBuildScript("Get-Unity-Install-Path.ps1 -ExpectedVersion " + unity_version)
                ).trim()

                // make sure it's quoted, there can be spaces inside
                unity_install_path = '"' + unity_install_path + '"'

                powershell(
                    label: "Activate Unity License",
                    returnStdout: false,
                    script: getBuildScript("Activate-Unity.ps1 -UnityPath $unity_install_path -Username $USERNAME -Password $PASSWORD -Serial $SERIAL -Arguments @($base_arguments)")
                )

                return unity_install_path
            }
        }
    }
}

def archiveBuild( String platform, String build_folder ) {
    if ( params.ARCHIVE_BUILD ) {
        timeout(time: 30, unit: 'MINUTES') {

            withCredentials([
                usernamePassword(credentialsId: 'builds-folder-access', usernameVariable: 'BUILDUSERNAME', passwordVariable: 'BUILDPASSWORD'),
            ]) {
                stage('Copy to Storage') {
                    String copy_arguments = " -ArchiveDirectory ${env.ARCHIVE_DIRECTORY}"
                    copy_arguments += " -SourceFolder ${build_folder}/${platform}"
                    copy_arguments += " -ZipFileName ${getZipFileName( platform )}"
                    copy_arguments += " -Username $BUILDUSERNAME -Password $BUILDPASSWORD"
                    
                    // :TODO: This is used to copy the switch build but feels hacky to do it this way
                    // copy_arguments += " -UnityVersion " + unity_version

                    powershell(
                        label: "Copy Build To Storage",
                        returnStdout: false,
                        script: getBuildScript("Copy-Build-Results-To-Storage.ps1 " + copy_arguments)
                    )
                }
            } //end withcredenditals use

            
        }
    }
}

def rotateArchives() {

    withCredentials([
        usernamePassword(credentialsId: 'builds-folder-access', usernameVariable: 'BUILDUSERNAME', passwordVariable: 'BUILDPASSWORD'),
        ]) {

        stage('Rotate Archives') {
            String archive_directory = "${env.ARCHIVE_DIRECTORY}/../"
            
            echo "Archive directory : " + archive_directory
            String copy_arguments = " -ArchiveDirectory " + archive_directory
            copy_arguments += " -Username $BUILDUSERNAME -Password $BUILDPASSWORD"
            
            pwsh(
                label: "Rotate Archive on Storage",
                returnStdout: false,
                script: getBuildScript( "Rotate-Archives.ps1 " + copy_arguments )
            )
        }
    } // end With credentials use
}

def uploadArchive( String platform ) {
    stage('Upload Archive') {
        try {
            String archived_zip_file_name = getArchivedZipFileName( platform )
        
            String arguments = " -ArchiveFilePath ${archived_zip_file_name}"
            arguments += " -BucketName ${env.AMAZON_S3_BUCKET_NAME}"
            arguments += " -AccessKey ${env.AMAZON_S3_ACCESS_KEY}"
            arguments += " -SecretKey ${env.AMAZON_S3_SECRET_KEY}"
            arguments += " -Platform ${platform}"

            pwsh(
                label: "Rotate Archive on Storage",
                returnStdout: false,
                script: getBuildScript( "Upload-Archives.ps1 " + arguments )
            )

            String zip_file_name = getZipFileName( platform )
            String url = "https://${env.AMAZON_S3_BUCKET_NAME}.${env.AMAZON_S3_SERVER_LOCATION}/${platform}/${zip_file_name}"
            slackSend channel: '', color: "good", message: "New nightly build ! <${url}|${zip_file_name}>"
        } catch ( Exception e ) {
            slackSend channel: '', color: "danger", message: "Error during the upload of ${zip_file_name} on amazon"
        }
    }
}

def getZipFileName( String platform ) {
    return "${env.JOB_NAME}_${platform}_${env.BUILD_NUMBER}.zip"
}

def getArchivedZipFileName( String platform ) {
    return "${env.ARCHIVE_DIRECTORY}/${getZipFileName(platform)}"
}

def cleanUp() {
    String unity_version = getUnityVersion()
    String unity_install_path = getUnityInstallPath(unity_version)

    deactivateUnityLicense(unity_install_path)

    removeFromBuilder()
}

def getUnityVersion() {
    return powershell(
        label: "Check Unity Version",
        returnStdout: true,
        script: getBuildScript("Check-Unity-Version.ps1 -ProjectPath " + env.PROJECT_PATH)
    ).trim()
}

def getUnityInstallPath( String unity_version ) {
    string unity_install_path = powershell(
        label: "Get Unity Install Path",
        returnStdout: true,
        script: getBuildScript("Get-Unity-Install-Path.ps1 -ExpectedVersion " + unity_version)
        ).trim()
        
        // make sure it's quoted, there can be spaces inside
        unity_install_path = '"' + unity_install_path + '"'
        
        return unity_install_path
}

def deactivateUnityLicense(String unity_install_path) {
    powershell(
        label: "Desactivate Unity License",
        returnStdout: false,
        script: getBuildScript("Desactivate-Unity.ps1 -UnityPath " + unity_install_path)
    )
}

def removeFromBuilder() {
    String temp_build_folder = "C:\\UnityBuilds\\${env.ARCHIVE_SUB_DIRECTORY}"

    stage('Remove build') {
        String copy_arguments = " -TempBuildFolder " + temp_build_folder

        powershell(
            label: "Remove Build From Builder",
            returnStdout: false,
            script: getBuildScript("Remove-Build-Results.ps1 " + copy_arguments)
        )
    }
}

def getBuildScript(String name) {
	echo new File(env.BUILD_SCRIPT_DIRECTORY_PATH, name).toString()
    return new File(env.BUILD_SCRIPT_DIRECTORY_PATH, name).toString()
}

def getConfiguration() {
    if (params.DEVELOPMENT_BUILD) {
        return "Debug"
    }
    if (params.ARCHIVE_BUILD) {
        return "Shipping"
    }
    if (params.DEPLOYMENT_ENVIRONMENT == "shipping") {
        return "Shipping"
    }
    return env.CLIENT_CONFIG
}

def getArchiveSubdirectory(String deployment_environment, String branch_name) {
    String directory = getBranchFolderName()

    if (deployment_environment != "testing") {
        directory += "/${deployment_environment}"
    } else {
        directory += "/${env.BUILD_NUMBER}"
    }

    return directory

}

def getBranchFolderName() {
    String job_name = "${env.JOB_NAME}"
    return job_name.replace("%2F", "/");
}

def getNodeLabels(String platform) {
    return "unity && ${platform.toLowerCase()}"
}

// Note you will have to add some exceptions in the Jenkins security options to allow this function to run
def abortPreviousRunningBuilds() {
    def hi = Jenkins.instance
    def pname = env.JOB_NAME.split('/')[0]

    hi.getItem(pname).getItem(env.JOB_BASE_NAME).getBuilds().each {
        build ->
            def exec = build.getExecutor()

        if (build.number < currentBuild.number && exec != null) {
            exec.interrupt(
                Result.ABORTED,
                new CauseOfInterruption.UserInterruption(
                    "Aborted by #${currentBuild.number}"
                )
            )
            println("Aborted previous running build #${build.number}")
        }
    }
}
